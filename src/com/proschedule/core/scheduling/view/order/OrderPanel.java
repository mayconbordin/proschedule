package com.proschedule.core.scheduling.view.order;

import com.proschedule.core.persistence.exceptions.CustomerPersistenceException;
import com.proschedule.core.persistence.exceptions.SetPersistenceException;
import com.proschedule.core.scheduling.exceptions.OrderPersistenceException;
import com.proschedule.util.combobox.BooleanOperatorComboBoxModel;
import com.proschedule.util.combobox.NumberOperatorComboBoxModel;
import com.proschedule.util.messages.MessageDialog;
import com.proschedule.util.tabs.AbstractTab;
import com.proschedule.util.combobox.StringOperatorComboBoxModel;
import com.proschedule.util.date.DateUtil;
import com.proschedule.util.date.DateUtilException;
import com.proschedule.util.messages.QuestionDialog;
import com.proschedule.util.search.SearchParam;
import java.util.Date;

/**
 * Painel de Ordens de produção - tela principal para exibição e edição de ordens de produção
 * 
 * @author Maycon Bordin
 * @version 1.0
 * @created 04-out-2010 13:24:50
 */
public class OrderPanel extends javax.swing.JPanel {
    private java.awt.Frame parent;
    private AbstractTab tab;
    private OrderTableModel orderTableModel;
    private OrderController controller;
    private javax.swing.JTabbedPane tabPane;
    private AbstractTab tabNewOrder;

    private OrderFieldComboBoxModel orderFieldComboBoxModel;
    private StringOperatorComboBoxModel stringOperatorComboBoxModel;
    private NumberOperatorComboBoxModel numberOperatorComboBoxModel;
    private BooleanOperatorComboBoxModel booleanOperatorComboBoxModel;

    /**
     * Construtor da Classe
     * 
     * @param parent O frame principal
     * @param tabPane O painel de abas
     */
    public OrderPanel( java.awt.Frame parent, javax.swing.JTabbedPane tabPane ) {
        this.parent = parent;
        this.tabPane = tabPane;
        startUp();
    }

    /**
     * Inicia as configurações, componentens, variáveis
     */
    public void startUp() {
        controller = new OrderController();

        initComponents();
        
        //Carrega o table model
        loadOrderTableModel();

        //Carrega a barra de busca
        loadSearchBar();
    }

    /**
     * Carrega a barra de busca de conjuntos
     */
    public void loadSearchBar() {
        orderFieldComboBoxModel = new OrderFieldComboBoxModel();
        stringOperatorComboBoxModel = new StringOperatorComboBoxModel();

        jcbField.setModel(orderFieldComboBoxModel);
        jcbOperator.setModel(stringOperatorComboBoxModel);

        jcbField.setSelectedIndex(0);
        jcbOperator.setSelectedIndex(0);
    }

    /**
     * Recarrega a posição padrão da barra de busca
     */
    public void reloadSearchBar() {
        jcbField.setSelectedIndex(0);
        jcbOperator.setSelectedIndex(0);
        jtfValue.setText(null);
    }

    /**
     * Carrega a tabela de conjuntos, listando todos os registros existentes
     */
    public void loadOrderTableModel() {
        try {
            orderTableModel = new OrderTableModel( getController().getOrders() );
            jtOrders.setModel(orderTableModel);
        } catch (OrderPersistenceException ex) {
            MessageDialog.error(ex, parent);
        }
    }

    /**
     * Carrega o objeto selecionado no controlador
     *
     * @return True se um objeto foi selecionado ou false se não havia objeto selecionado
     */
    public boolean loadSelectedOrder() {
        int index = jtOrders.getSelectedRow();

        if ( index != -1 ) {
            //Ordera o conjunto selecionado para edição
            getController().editOrder( orderTableModel.getOrder( index ) );
            return true;
        } else {
            MessageDialog.error("É preciso selecionar uma ordem de produção para fazer isso!", parent);
        }

        return false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspOrders = new javax.swing.JScrollPane();
        jtOrders = new javax.swing.JTable();
        jbAdd = new javax.swing.JButton();
        jbModify = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jlSearchingFor = new javax.swing.JLabel();
        jcbField = new javax.swing.JComboBox();
        jcbOperator = new javax.swing.JComboBox();
        jtfValue = new javax.swing.JTextField();
        jbGoSearch = new javax.swing.JButton();
        jbClearSearch = new javax.swing.JButton();

        jtOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtOrdersMouseClicked(evt);
            }
        });
        jspOrders.setViewportView(jtOrders);

        jbAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/add_16.png"))); // NOI18N
        jbAdd.setText("Adicionar");
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddActionPerformed(evt);
            }
        });

        jbModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/edit_16.png"))); // NOI18N
        jbModify.setText("Modificar");
        jbModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModifyActionPerformed(evt);
            }
        });

        jbRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/close_16.png"))); // NOI18N
        jbRemove.setText("Remover");
        jbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveActionPerformed(evt);
            }
        });

        jlSearchingFor.setText("Buscar por");

        jcbField.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFieldItemStateChanged(evt);
            }
        });

        jbGoSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/search_16.png"))); // NOI18N
        jbGoSearch.setToolTipText("Buscar");
        jbGoSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGoSearchActionPerformed(evt);
            }
        });

        jbClearSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/clear_16.png"))); // NOI18N
        jbClearSearch.setToolTipText("Limpar Busca");
        jbClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClearSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jspOrders, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbModify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                        .addComponent(jlSearchingFor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfValue, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbGoSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbModify)
                        .addComponent(jbRemove)
                        .addComponent(jbAdd))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jbClearSearch)
                        .addComponent(jbGoSearch)
                        .addComponent(jtfValue, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcbOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlSearchingFor))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspOrders, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Carrega os dados do conjunto selecionado no formulário toda vez que um
     * conjunto é selecionado na tabela. Em caso de clique duplo, o conjunto
     * entre em modo de edição.
     * 
     * @param evt
     */
    private void jtOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtOrdersMouseClicked
        //Clique duplo
        if (evt.getClickCount() == 2) {
            if ( loadSelectedOrder() ) {
                if ( tabNewOrder == null || !tabNewOrder.isActivated() ) {
                    NewOrderPanel form = new NewOrderPanel(parent, this);
                    tabNewOrder = new AbstractTab(tabPane , "Ordem de Produção: " + controller.getOrderId(), form);
                    form.setTab( tabNewOrder );
                } else {
                    tabNewOrder.setAsSelected();
                }
            }
        }
    }//GEN-LAST:event_jtOrdersMouseClicked

    /**
     * Adição de nova conjunto - botão adicionar.
     * @param evt
     */
    private void jbAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddActionPerformed
        controller.newOrder();
        if ( tabNewOrder == null || !tabNewOrder.isActivated() ) {
            NewOrderPanel form = new NewOrderPanel(parent, this);
            tabNewOrder = new AbstractTab(tabPane , "Nova Ordem de Produção", form);
            form.setTab( tabNewOrder );
        } else {
            tabNewOrder.setAsSelected();
        }
    }//GEN-LAST:event_jbAddActionPerformed

    /**
     * Coloca em modo de edição o conjunto selecionado - botão modificar
     * @param evt
     */
    private void jbModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModifyActionPerformed
        if ( loadSelectedOrder() ) {
            if ( tabNewOrder == null || !tabNewOrder.isActivated() ) {
                NewOrderPanel form = new NewOrderPanel(parent, this);
                tabNewOrder = new AbstractTab(tabPane , "Ordem de Produção: " + controller.getOrderId(), form);
                form.setTab( tabNewOrder );
            } else {
                tabNewOrder.setAsSelected();
            }
        }
    }//GEN-LAST:event_jbModifyActionPerformed

    /**
     * Realiza a busca de acordo com os parâmetros informados e lista-os na tabela
     * de conjuntos.
     * 
     * @param evt
     */
    private void jbGoSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGoSearchActionPerformed
        try {
            SearchParam field = (SearchParam) jcbField.getSelectedItem();
            SearchParam operator = (SearchParam) jcbOperator.getSelectedItem();
            
            if ( field.getName().equals("id") ) {
                String value = jtfValue.getText();
                orderTableModel = new OrderTableModel( controller.getOrders(field, value, operator) );
            } else if ( field.getName().equals("setQuantity") ) {
                Double value = Double.parseDouble( jtfValue.getText() );
                orderTableModel = new OrderTableModel( controller.getOrders(field, value, operator) );
            } else if ( field.getName().equals("deliveryDate") ) {
                Date value = DateUtil.formatDate( jtfValue.getText() );
                orderTableModel = new OrderTableModel( controller.getOrders(field, value, operator) );
            } else if ( field.getName().equals("set") ) {
                String value = jtfValue.getText();
                orderTableModel = new OrderTableModel( controller.getOrdersPerSet(value, operator) );
            } else if ( field.getName().equals("customer") ) {
                String value = jtfValue.getText();
                orderTableModel = new OrderTableModel( controller.getOrdersPerCustomer(value, operator) );
            }

            jtOrders.setModel(orderTableModel);
        } catch (SetPersistenceException ex) {
            MessageDialog.error(ex, parent);
        } catch (OrderPersistenceException ex) {
            MessageDialog.error(ex, parent);
        } catch (CustomerPersistenceException ex) {
            MessageDialog.error(ex, parent);
        } catch (NullPointerException ex) {
            MessageDialog.error("É preciso preencher todos os valores para a busca.", ex.toString(), parent);
        } catch (NumberFormatException ex) {
            MessageDialog.error("O valor de busca precisa ser numérico.", ex.toString(), parent);
        } catch (DateUtilException ex) {
            MessageDialog.error(ex.getMessage(), ex.getDetailMessage(), parent);
        }
    }//GEN-LAST:event_jbGoSearchActionPerformed

    /**
     * Limpa da tabela a busca realizada.
     * 
     * @param evt
     */
    private void jbClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearSearchActionPerformed
        loadOrderTableModel();
        reloadSearchBar();
    }//GEN-LAST:event_jbClearSearchActionPerformed

    /**
     * Remove o conjunto selecionado - botão remover
     * 
     * @param evt
     */
    private void jbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveActionPerformed
        if ( loadSelectedOrder() ) {
            if ( QuestionDialog.confirm("Deseja realmente remover o conjunto Cod. "
                    + controller.getOrder().getId() + " do sistema?" ) ) {
                try {
                    controller.removeOrder();

                    MessageDialog.sucess("Conjunto removido com sucesso!", parent);
                    
                    loadOrderTableModel();
                } catch (OrderPersistenceException ex) {
                    MessageDialog.error(ex, parent);
                }
            }
        }
    }//GEN-LAST:event_jbRemoveActionPerformed

    /**
     * Modifica os operadores de busca de acordo com o campo que será buscado
     * 
     * @param evt
     */
    private void jcbFieldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFieldItemStateChanged
        SearchParam selected = (SearchParam) jcbField.getSelectedItem();

        if ( selected.getName().equals( "id" ) ) {
            stringOperatorComboBoxModel = new StringOperatorComboBoxModel();
            jcbOperator.setModel(stringOperatorComboBoxModel);
        } else if ( selected.getName().equals( "setQuantity" ) ||
                selected.getName().equals( "deliveryDate" ) ) {
            numberOperatorComboBoxModel = new NumberOperatorComboBoxModel();
            jcbOperator.setModel(numberOperatorComboBoxModel);
        } else if ( selected.getName().equals( "set" ) ||
                selected.getName().equals( "customer" ) ) {
            booleanOperatorComboBoxModel = new BooleanOperatorComboBoxModel();
            jcbOperator.setModel(booleanOperatorComboBoxModel);
        }

        jcbOperator.setSelectedIndex(0);
    }//GEN-LAST:event_jcbFieldItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbClearSearch;
    private javax.swing.JButton jbGoSearch;
    private javax.swing.JButton jbModify;
    private javax.swing.JButton jbRemove;
    private javax.swing.JComboBox jcbField;
    private javax.swing.JComboBox jcbOperator;
    private javax.swing.JLabel jlSearchingFor;
    private javax.swing.JScrollPane jspOrders;
    private javax.swing.JTable jtOrders;
    private javax.swing.JTextField jtfValue;
    // End of variables declaration//GEN-END:variables

    /**
     * @param tab the tab to set
     */
    public void setTab(AbstractTab tab) {
        this.tab = tab;
    }

    /**
     * @return the presenter
     */
    public OrderController getController() {
        return controller;
    }

}
