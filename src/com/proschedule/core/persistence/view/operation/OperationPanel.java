package com.proschedule.core.persistence.view.operation;

import com.proschedule.core.persistence.exceptions.OperationPersistenceException;
import com.proschedule.util.combobox.NumberOperatorComboBoxModel;
import com.proschedule.util.messages.MessageDialog;
import com.proschedule.util.tabs.AbstractTab;
import com.proschedule.util.combobox.StringOperatorComboBoxModel;
import com.proschedule.util.messages.QuestionDialog;
import com.proschedule.util.search.SearchParam;

/**
 * Painel de Operações - tela principal para exibição e edição de operações
 * 
 * @author Maycon Bordin
 * @version 1.0
 * @created 04-out-2010 13:24:50
 */
public class OperationPanel extends javax.swing.JPanel {
    private java.awt.Frame parent;
    private AbstractTab tab;
    private OperationTableModel operationTableModel;
    private OperationPresenter presenter;

    private OperationFieldComboBoxModel operationFieldComboBoxModel;
    private StringOperatorComboBoxModel stringOperatorComboBoxModel;
    private NumberOperatorComboBoxModel numberOperatorComboBoxModel;

    /**
     * Construtor da Classe
     * 
     * @param parent O frame principal
     */
    public OperationPanel( java.awt.Frame parent ) {
        this.parent = parent;
        startUp();
    }

    /**
     * Inicializa os componentes, variáveis.
     */
    public void startUp() {
        initComponents();

        presenter = new OperationPresenter();

        //Carrega o table model
        loadOperationTableModel();

        //Carrega a barra de busca
        loadSearchBar();
    }

    /**
     * Carrega a barra de busca de operações
     */
    public void loadSearchBar() {
        operationFieldComboBoxModel = new OperationFieldComboBoxModel();
        stringOperatorComboBoxModel = new StringOperatorComboBoxModel();

        jcbField.setModel(operationFieldComboBoxModel);
        jcbOperator.setModel(stringOperatorComboBoxModel);

        jcbField.setSelectedIndex(0);
        jcbOperator.setSelectedIndex(0);
    }

    /**
     * Recarrega a posição padrão da barra de busca
     */
    public void reloadSearchBar() {
        jcbField.setSelectedIndex(0);
        jcbOperator.setSelectedIndex(0);
        jtfValue.setText(null);
    }

    /**
     * Carrega a tabela de operações, listando todos os registros existentes
     */
    public void loadOperationTableModel() {
        try {
            presenter.loadOperations();
            operationTableModel = new OperationTableModel( presenter.getOperations(false) );
            operationTableModel.orderById();
            jtOperations.setModel(operationTableModel);
        } catch (OperationPersistenceException ex) {
            MessageDialog.error(ex, parent);
        }
    }

    /**
     * Recarrega a tabela de operações. É usado quando modificações são efetuadas
     * em algum registro.
     */
    public void reloadOperationTableModel() {
        try {
            presenter.loadOperations();
            operationTableModel = new OperationTableModel( presenter.getOperations(false) );
            jtOperations.setModel(operationTableModel);
        } catch (OperationPersistenceException ex) {
            MessageDialog.error(ex, parent);
        }
    }

    /**
     * Carrega no presenter o registro selecionado na tabela de componentes
     *
     * @return True se houver um registro selecionado ou falso se nada foi selecionado
     */
    public boolean loadSelectedRow() {
        int index = jtOperations.getSelectedRow();

        if ( index != -1 ) {
            //Seta o componente selecionado para edição
            presenter.setOperation( operationTableModel.getOperation( index ) );

            return true;
        } else {
            MessageDialog.error("É preciso selecionar um componente para fazer isso!", parent);
            return false;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspOperations = new javax.swing.JScrollPane();
        jtOperations = new javax.swing.JTable();
        jbAdd = new javax.swing.JButton();
        jbModify = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jlSearchingFor = new javax.swing.JLabel();
        jcbField = new javax.swing.JComboBox();
        jcbOperator = new javax.swing.JComboBox();
        jtfValue = new javax.swing.JTextField();
        jbGoSearch = new javax.swing.JButton();
        jbClearSearch = new javax.swing.JButton();

        jtOperations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtOperations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtOperationsMouseClicked(evt);
            }
        });
        jspOperations.setViewportView(jtOperations);

        jbAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/add_16.png"))); // NOI18N
        jbAdd.setText("Adicionar");
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddActionPerformed(evt);
            }
        });

        jbModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/edit_16.png"))); // NOI18N
        jbModify.setText("Modificar");
        jbModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModifyActionPerformed(evt);
            }
        });

        jbRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/close_16.png"))); // NOI18N
        jbRemove.setText("Remover");
        jbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveActionPerformed(evt);
            }
        });

        jlSearchingFor.setText("Buscar por");

        jcbField.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFieldItemStateChanged(evt);
            }
        });

        jbGoSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/search_16.png"))); // NOI18N
        jbGoSearch.setToolTipText("Buscar");
        jbGoSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGoSearchActionPerformed(evt);
            }
        });

        jbClearSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/clear_16.png"))); // NOI18N
        jbClearSearch.setToolTipText("Limpar Busca");
        jbClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClearSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jspOperations, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbModify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                        .addComponent(jlSearchingFor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfValue, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbGoSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbModify)
                        .addComponent(jbRemove)
                        .addComponent(jbAdd))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jbClearSearch)
                        .addComponent(jbGoSearch)
                        .addComponent(jtfValue, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcbOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlSearchingFor))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspOperations, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Carrega os dados do operação selecionado no formulário toda vez que um
     * operação é selecionado na tabela. Em caso de clique duplo, o operação
     * entre em modo de edição.
     * 
     * @param evt
     */
    private void jtOperationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtOperationsMouseClicked
        //Clique duplo
        if (evt.getClickCount() == 2) {
            if ( loadSelectedRow() ) {
                loadSelectedRow();
                presenter.setEdit(true);

                NewOperationDialog dialog = new NewOperationDialog(parent, this);
                dialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_jtOperationsMouseClicked

    /**
     * Adição de nova operação - botão adicionar.
     * @param evt
     */
    private void jbAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddActionPerformed
        presenter.setEdit(false);
        NewOperationDialog dialog = new NewOperationDialog(parent, this);
        dialog.setVisible(true);
    }//GEN-LAST:event_jbAddActionPerformed

    /**
     * Coloca em modo de edição o operação selecionado - botão modificar
     * @param evt
     */
    private void jbModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModifyActionPerformed
        if ( loadSelectedRow() ) {
            loadSelectedRow();
            presenter.setEdit(true);

            NewOperationDialog dialog = new NewOperationDialog(parent, this);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_jbModifyActionPerformed

    /**
     * Realiza a busca de acordo com os parâmetros informados e lista-os na tabela
     * de operações.
     * 
     * @param evt
     */
    private void jbGoSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGoSearchActionPerformed
        try {
            SearchParam field = (SearchParam) jcbField.getSelectedItem();
            SearchParam operator = (SearchParam) jcbOperator.getSelectedItem();
            
            if ( field.getName().equals("id") ) {
                Integer value = Integer.parseInt( jtfValue.getText() );
                presenter.loadOperations(field, value, operator);
            } else if ( field.getName().equals("description") ) {
                String value = jtfValue.getText();
                presenter.loadOperations(field, value, operator);
            } else if ( field.getName().equals("type") ) {
                String value = jtfValue.getText();
                presenter.loadOperations(value, operator);
            }

            operationTableModel = new OperationTableModel( presenter.getOperations(false) );
            jtOperations.setModel(operationTableModel);
        } catch (OperationPersistenceException ex) {
            MessageDialog.error(ex, parent);
        } catch (NullPointerException ex) {
            MessageDialog.error("É preciso preencher todos os valores para a busca.",
                    ex.toString(), parent);
        }
    }//GEN-LAST:event_jbGoSearchActionPerformed

    /**
     * Limpa da tabela a busca realizada.
     * 
     * @param evt
     */
    private void jbClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearSearchActionPerformed
        reloadOperationTableModel();
        reloadSearchBar();
    }//GEN-LAST:event_jbClearSearchActionPerformed

    /**
     * Remove o operação selecionado - botão remover
     * 
     * @param evt
     */
    private void jbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveActionPerformed
        if ( loadSelectedRow() ) {
            if ( QuestionDialog.confirm("Deseja realmente remover o operação Cod. "
                    + presenter.getOperation().getId() + " do sistema?" ) ) {
                try {
                    presenter.remove();

                    MessageDialog.sucess("Operação removida com sucesso!", parent);
                    
                    reloadOperationTableModel();
                } catch (OperationPersistenceException ex) {
                    MessageDialog.error(ex, parent);
                }
            }
        }
    }//GEN-LAST:event_jbRemoveActionPerformed

    /**
     * Modifica os operadores disponíveis de acordo com o campo escohlido.
     * Campos string tem alguns tipos de operadores e valores numéricos tem
     * outros.
     * 
     * @param evt
     */
    private void jcbFieldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFieldItemStateChanged
        SearchParam selected = (SearchParam) jcbField.getSelectedItem();

        if ( selected.getName().equals( "id" ) ) {
            numberOperatorComboBoxModel = new NumberOperatorComboBoxModel();
            jcbOperator.setModel(numberOperatorComboBoxModel);
        } else if ( selected.getName().equals( "description" ) ||
                 selected.getName().equals( "type" ) ) {
            stringOperatorComboBoxModel = new StringOperatorComboBoxModel();
            jcbOperator.setModel(stringOperatorComboBoxModel);
        }

        jcbOperator.setSelectedIndex(0);
    }//GEN-LAST:event_jcbFieldItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbClearSearch;
    private javax.swing.JButton jbGoSearch;
    private javax.swing.JButton jbModify;
    private javax.swing.JButton jbRemove;
    private javax.swing.JComboBox jcbField;
    private javax.swing.JComboBox jcbOperator;
    private javax.swing.JLabel jlSearchingFor;
    private javax.swing.JScrollPane jspOperations;
    private javax.swing.JTable jtOperations;
    private javax.swing.JTextField jtfValue;
    // End of variables declaration//GEN-END:variables

    /**
     * @param tab the tab to set
     */
    public void setTab(AbstractTab tab) {
        this.tab = tab;
    }

    /**
     * @return the presenter
     */
    public OperationPresenter getPresenter() {
        return presenter;
    }

}
