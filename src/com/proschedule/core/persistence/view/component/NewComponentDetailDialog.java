package com.proschedule.core.persistence.view.component;

import com.proschedule.core.persistence.exceptions.ComponentDetailPersistenceException;
import com.proschedule.core.persistence.exceptions.OperationPersistenceException;
import com.proschedule.core.persistence.model.OperationType;
import com.proschedule.core.persistence.view.operation.OperationSearchDialog;
import com.proschedule.util.forms.MouseAdapterBalloonTip;
import com.proschedule.util.messages.MessageDialog;
import com.proschedule.validator.util.ValidatorException;
import java.awt.Color;
import java.util.Set;
import javax.validation.ConstraintViolation;

/**
 * Tela para adição/modificação de detalhes do componente
 * 
 * @author Maycon Bordin
 * @version 1.0
 * @created 04-out-2010 13:24:50
 */
public class NewComponentDetailDialog extends javax.swing.JDialog {
    private ComponentPanel panel;
    private java.awt.Frame parent;
    private ComponentController controller;

    private MouseAdapterBalloonTip operationBalloonTip;
    private MouseAdapterBalloonTip leadTimeValueBalloonTip;

    /**
     * Construtor da Classe - Edição
     * 
     * @param parent Frame principal
     * @param panel Painel de componentes
     */
    public NewComponentDetailDialog(java.awt.Frame parent, ComponentPanel panel) {
        super(parent, true);
        this.parent = parent;
        this.panel = panel;
        this.controller = panel.getController();

        startUp();
    }

    /**
     * Inicia as configurações, componentens, variáveis
     */
    public void startUp() {
        initComponents();

        //Centraliza o diálogo
        setLocationRelativeTo(null);

        //Coloca os valores na tela
        if ( controller.isDetailEdit()) {
            modelToView();
            setTitle("Modificar Operação");
            jtfOperation.setEditable(false);
            jbSearchOperation.setEnabled(false);
        } else {
            setTitle("Adicionar Operação");
        }
    }

    /**
     * Passa os dados do detalhe em edição para os componentes visuais
     */
    public void modelToView() {
        jtfOperation.setText( String.valueOf( controller.getComponentDetailOperationId() ) );
        jtfLeadTimeValue.setText( String.valueOf( controller.getComponentDetailLeadTimeValue() ) );
        jcbLeadTimeType.setSelectedItem( controller.getComponentDetailLeadTimeType() );
    }

    /**
     * Limpa os erros de validação do formulário
     */
    public void clearObjectErrors() {
        jtfOperation.setBackground(Color.white);
        jtfOperation.removeMouseListener(operationBalloonTip);

        jtfLeadTimeValue.setBackground(Color.white);
        jtfLeadTimeValue.removeMouseListener(leadTimeValueBalloonTip);
    }

    /**
     * Exibe no formulário os erros de validação colocando os componentes com
     * dados inválidos em amarelo e exibindo um balão com o erro.
     *
     * @param ve A exceção que contém os erros de validação
     */
    public void setObjectErrors(ValidatorException ve) {
        Set<ConstraintViolation> constraints = (Set<ConstraintViolation>) ve.getConstraintViolations();

        for ( ConstraintViolation cv : constraints ) {
            String fieldName = cv.getPropertyPath().toString();

            setObjectError(fieldName, cv.getMessage());
        }
    }

    /**
     * Exibe no formulário o erro de validação no componente indicado.
     *
     * @param fieldName O nome do campo que receberá o erro
     * @param message A mensagem a ser exibida no balão
     */
    public void setObjectError(String fieldName, String message) {
        if ( fieldName.equals("operation") ) {
            jtfOperation.setBackground(Color.yellow);

            operationBalloonTip = new MouseAdapterBalloonTip(jtfOperation, message);
            jtfOperation.addMouseListener(operationBalloonTip);
        } else if ( fieldName.equals("leadTimeValue") ) {
            jtfLeadTimeValue.setBackground(Color.yellow);

            leadTimeValueBalloonTip = new MouseAdapterBalloonTip(jtfLeadTimeValue, message);
            jtfLeadTimeValue.addMouseListener(leadTimeValueBalloonTip);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpOperation = new javax.swing.JPanel();
        jtfOperation = new javax.swing.JTextField();
        jbSearchOperation = new javax.swing.JButton();
        jpLeadTime = new javax.swing.JPanel();
        jtfLeadTimeValue = new javax.swing.JTextField();
        jcbLeadTimeType = new javax.swing.JComboBox();
        jbSave = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpOperation.setBorder(javax.swing.BorderFactory.createTitledBorder("Código da Operação"));

        jbSearchOperation.setText("...");
        jbSearchOperation.setToolTipText("Buscar Operação");
        jbSearchOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSearchOperationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpOperationLayout = new javax.swing.GroupLayout(jpOperation);
        jpOperation.setLayout(jpOperationLayout);
        jpOperationLayout.setHorizontalGroup(
            jpOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOperationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtfOperation, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSearchOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpOperationLayout.setVerticalGroup(
            jpOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOperationLayout.createSequentialGroup()
                .addGroup(jpOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jtfOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSearchOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpLeadTime.setBorder(javax.swing.BorderFactory.createTitledBorder("Lead Time"));

        jcbLeadTimeType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "horas" }));

        javax.swing.GroupLayout jpLeadTimeLayout = new javax.swing.GroupLayout(jpLeadTime);
        jpLeadTime.setLayout(jpLeadTimeLayout);
        jpLeadTimeLayout.setHorizontalGroup(
            jpLeadTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLeadTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtfLeadTimeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbLeadTimeType, 0, 86, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpLeadTimeLayout.setVerticalGroup(
            jpLeadTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLeadTimeLayout.createSequentialGroup()
                .addGroup(jpLeadTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfLeadTimeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbLeadTimeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/save_16.png"))); // NOI18N
        jbSave.setText("Salvar");
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        jbCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/close_16.png"))); // NOI18N
        jbCancel.setText("Cancelar");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpOperation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpLeadTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jpLeadTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancel)
                    .addComponent(jbSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Salva o detalhe de componente, tanto em adição como modificação
     * 
     * @param evt
     */
    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        try {
            clearObjectErrors();

            Integer operation = 0;
            Double ltValue = 0.0;
            String ltType = "";

            boolean validOperation = false;
            boolean validLtValue = false;

            try {
                operation = Integer.parseInt( getJtfOperation().getText() );
                validOperation = true;
            } catch (NumberFormatException ex) {
                setObjectError("operation", "O código da operação deve ser um número inteiro.");
            }

            try {
                ltValue = Double.parseDouble( getJtfLeadTimeValue().getText() );
                validLtValue = true;
            } catch (NumberFormatException ex) {
                setObjectError("leadTimeValue", "O valor do lead time deve ser numérico.");
            }

            ltType = (String) getJcbLeadTimeType().getSelectedItem();

            if ( validOperation && validLtValue ) {
                try {
                    if ( controller.setComponentDetailOperation(operation) ) {
                        controller.setComponentDetailLeadTime(ltValue, ltType);
                        controller.setComponentDetailOrder( panel.getComponentDetailTableModel().getNextOrder() );

                        setVisible(false);
                        controller.saveComponentDetail();
                        panel.loadComponentDetailTableModel();

                        String message = "";

                        if ( controller.isDetailEdit() ) {
                            message = "modificada";
                        } else {
                            message = "adicionada";
                        }

                        //Exibe mensagem de aviso
                        MessageDialog.sucess("Operação " + message + " com sucesso!", parent);

                        dispose();
                    } else { //Se já houver detalhamento com mesma chave primária
                        MessageDialog.error("O componente já possui esta operação salva.", parent);
                    }
                } catch (ComponentDetailPersistenceException ex) {
                    MessageDialog.error(ex, parent);
                } catch (OperationPersistenceException ex) {
                    MessageDialog.error(ex, parent);
                }
            } else {
                throw new ValidatorException();
            }

        } catch (ValidatorException ex) {
            MessageDialog.warning(ex, parent);
            setObjectErrors(ex);
        }
    }//GEN-LAST:event_jbSaveActionPerformed

    /**
     * Cancela a operação em andamento
     * 
     * @param evt
     */
    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    /**
     * Abre o diálogo para busca de operações
     * 
     * @param evt
     */
    private void jbSearchOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSearchOperationActionPerformed
        OperationSearchDialog dialog = new OperationSearchDialog(parent,
                new ComponentOperationSearchAdapter(this), OperationType.COMPONENT_TYPE_DESCRIPTION);
        dialog.setVisible(true);
    }//GEN-LAST:event_jbSearchOperationActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbSave;
    private javax.swing.JButton jbSearchOperation;
    private javax.swing.JComboBox jcbLeadTimeType;
    private javax.swing.JPanel jpLeadTime;
    private javax.swing.JPanel jpOperation;
    private javax.swing.JTextField jtfLeadTimeValue;
    private javax.swing.JTextField jtfOperation;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jcbLeadTimeType
     */
    public javax.swing.JComboBox getJcbLeadTimeType() {
        return jcbLeadTimeType;
    }

    /**
     * @return the jtfLeadTimeValue
     */
    public javax.swing.JTextField getJtfLeadTimeValue() {
        return jtfLeadTimeValue;
    }

    /**
     * @return the jtfOperation
     */
    public javax.swing.JTextField getJtfOperation() {
        return jtfOperation;
    }

}
