package com.proschedule.core.persistence.view.set;

import com.proschedule.core.persistence.exceptions.ComponentPersistenceException;
import com.proschedule.core.persistence.exceptions.SetComponentPersistenceException;
import com.proschedule.core.persistence.view.component.ComponentSearchDialog;
import com.proschedule.util.forms.MouseAdapterBalloonTip;
import com.proschedule.util.messages.MessageDialog;
import com.proschedule.validator.util.ValidatorException;
import java.awt.Color;
import java.util.Set;
import javax.validation.ConstraintViolation;

/**
 * Diálogo para adição de componente de conjunto.
 * 
 * @author Maycon Bordin
 * @version 1.0
 * @created 04-out-2010 13:24:49
 */
public class NewSetComponentDialog extends javax.swing.JDialog {
    private java.awt.Frame parent;
    private SetController controller;
    private NewSetPanel panel;

    private MouseAdapterBalloonTip componentBalloonTip;
    private MouseAdapterBalloonTip quantityBalloonTip;

    /**
     * Construtor da Classe
     * 
     * @param parent O frame principal
     * @param panel O painel ao qual o diálogo pertence
     */
    public NewSetComponentDialog(java.awt.Frame parent, NewSetPanel panel) {
        super(parent, true);
        this.parent = parent;
        this.panel = panel;
        startUp();
    }

    /**
     * Inicializa as configurações
     */
    public void startUp() {
        this.controller = panel.getController();
        initComponents();

        //Centraliza o diálogo
        setLocationRelativeTo(null);

        if ( controller.isComponentEdit() ) {
            modelToView();
            setTitle("Modificar Componente");
            jtfComponent.setEditable(false);
            jbSearch.setEnabled(false);
        } else {
            setTitle("Adicionar Componente");
        }
    }

    /**
     * Transfere as informações do model para os componentes visuais
     */
    public void modelToView() {
        jtfComponent.setText( controller.getSetComponentComponentId() );
        jtfQuantity.setText( String.valueOf( controller.getSetComponentComponentQuantity() ) );
    }

    /**
     * Limpa os erros de validação do formulário
     */
    public void clearObjectErrors() {
        jtfComponent.setBackground(Color.white);
        jtfComponent.removeMouseListener(componentBalloonTip);

        jtfQuantity.setBackground(Color.white);
        jtfQuantity.removeMouseListener(quantityBalloonTip);
    }

    /**
     * Exibe no formulário os erros de validação colocando os componentes com
     * dados inválidos em amarelo e exibindo um balão com o erro.
     *
     * @param ve A exceção que contém os erros de validação
     */
    public void setObjectErrors(ValidatorException ve) {
        if ( ve.getConstraintViolations() != null ) {
            Set<ConstraintViolation> constraints = (Set<ConstraintViolation>) ve.getConstraintViolations();

            for ( ConstraintViolation cv : constraints ) {
                String fieldName = cv.getPropertyPath().toString();

                setObjectError(fieldName, cv.getMessage());
            }
        }
    }

    /**
     * Exibe no formulário o erro de validação no componente indicado.
     *
     * @param fieldName O nome do campo que receberá o erro
     * @param message A mensagem a ser exibida no balão
     */
    public void setObjectError(String fieldName, String message) {
        if ( fieldName.equals("component") ) {
            jtfComponent.setBackground(Color.yellow);

            componentBalloonTip = new MouseAdapterBalloonTip(jtfComponent, message);
            jtfComponent.addMouseListener(componentBalloonTip);
        } else if ( fieldName.equals("componentQuantity") ) {
            jtfQuantity.setBackground(Color.yellow);

            quantityBalloonTip = new MouseAdapterBalloonTip(jtfQuantity, message);
            jtfQuantity.addMouseListener(quantityBalloonTip);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpComponent = new javax.swing.JPanel();
        jtfComponent = new javax.swing.JTextField();
        jbSearch = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();
        jpQuantity = new javax.swing.JPanel();
        jtfQuantity = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpComponent.setBorder(javax.swing.BorderFactory.createTitledBorder("Código do Componente"));

        jbSearch.setText("...");
        jbSearch.setToolTipText("Buscar Componente");
        jbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpComponentLayout = new javax.swing.GroupLayout(jpComponent);
        jpComponent.setLayout(jpComponentLayout);
        jpComponentLayout.setHorizontalGroup(
            jpComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpComponentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtfComponent, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpComponentLayout.setVerticalGroup(
            jpComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpComponentLayout.createSequentialGroup()
                .addGroup(jpComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jbSearch, 0, 22, Short.MAX_VALUE)
                    .addComponent(jtfComponent, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jbCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/close_16.png"))); // NOI18N
        jbCancel.setText("Cancelar");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        jbSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/proschedule/resources/images/forms/save_16.png"))); // NOI18N
        jbSave.setText("Salvar");
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        jpQuantity.setBorder(javax.swing.BorderFactory.createTitledBorder("Quantidade"));

        javax.swing.GroupLayout jpQuantityLayout = new javax.swing.GroupLayout(jpQuantity);
        jpQuantity.setLayout(jpQuantityLayout);
        jpQuantityLayout.setHorizontalGroup(
            jpQuantityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpQuantityLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtfQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpQuantityLayout.setVerticalGroup(
            jpQuantityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpQuantityLayout.createSequentialGroup()
                .addComponent(jtfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpComponent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpComponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancel)
                    .addComponent(jbSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Abre o diálogo para busca de componente - botão buscar
     * 
     * @param evt
     */
    private void jbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSearchActionPerformed
        ComponentSearchDialog dialog 
                = new ComponentSearchDialog(parent, new SetComponentSearchAdapter(this));
        dialog.setVisible(true);
    }//GEN-LAST:event_jbSearchActionPerformed

    /**
     * Cancela a operação em curso - botão cancelar
     * 
     * @param evt
     */
    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    /**
     * Salva os dados no diálogo - botão salvar
     * 
     * @param evt
     */
    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        try {
            clearObjectErrors();

            Double quantity = null;
            String componentId = jtfComponent.getText();

            boolean validQuantity = false;
            boolean validComponentId = false;

            if ( jtfComponent.getText().equals("") || jtfComponent.getText().trim().isEmpty() ) {
                setObjectError("component", "O código do componente não pode ser vazio");
            } else {
                validComponentId = true;
            }

            try {
                quantity = Double.parseDouble( jtfQuantity.getText() );
                validQuantity = true;
            } catch (NumberFormatException ex) {
                setObjectError("componentQuantity", "A quantidade do componente deve ser numérica.");
            }

            if ( validQuantity && validComponentId ) {
                try {
                    if ( controller.setSetComponentComponent( componentId ) ) {
                        controller.setSetComponentComponentQuantity(quantity);

                        setVisible(false);
                        controller.saveSetComponent();
                        panel.loadComponentsTableModel();

                        String message = "";

                        if ( controller.isDetailEdit() ) {
                            message = "modificado";
                        } else {
                            message = "adicionado";
                        }

                        //Exibe mensagem de sucesso
                        MessageDialog.sucess("Componente " + message + " com sucesso!", parent);

                        dispose();
                    } else {
                        MessageDialog.warning("Este componente já faz parte do conjunto!", parent);
                    }
                } catch (SetComponentPersistenceException ex) {
                    MessageDialog.error(ex, parent);
                } catch (ComponentPersistenceException ex) {
                    MessageDialog.error(ex, parent);
                }
            } else {
                throw new ValidatorException();
            }
        } catch (ValidatorException ex) {
            MessageDialog.warning(ex, parent);
            setObjectErrors(ex);
        }
    }//GEN-LAST:event_jbSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbSave;
    private javax.swing.JButton jbSearch;
    private javax.swing.JPanel jpComponent;
    private javax.swing.JPanel jpQuantity;
    private javax.swing.JTextField jtfComponent;
    private javax.swing.JTextField jtfQuantity;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jtfComponent
     */
    public javax.swing.JTextField getJtfComponent() {
        return jtfComponent;
    }

}
